from flask import Flask, jsonify, request
from flask_cors import CORS
from transformers import pipeline
import pandas as pd
from PyPDF2 import PdfReader


app = Flask(__name__)
CORS(app)

def detect_text(text):
        pipe = pipeline("text-classification", model="nlptown/bert-base-multilingual-uncased-sentiment")
        res = pipe(text)
        for item in res:
            value = item['label']
            score = item['score']
            if value == '1 stars' or value == '2 stars':
                out = 0
            elif value == '3 stars' or value == '4 stars' or value == '5 stars':
                out = 1
        if out == 0:
            result = f'The Given text has been generated by Human {score:.2f}'
        else:
            result = f'The Given text has been generated by an AI and score is {score:.2f}'
        return result

def pdfprocess(file):
    reader = PdfReader(file)
    pipe = pipeline("text-classification", model="nlptown/bert-base-multilingual-uncased-sentiment")
    total_score = 0
    label_count = {}

    for i in range(len(reader.pages)):
        page = reader.pages[i]
        text = page.extract_text()

        max_seq_length = 512
        chunks = [text[j:j + max_seq_length] for j in range(0, len(text), max_seq_length)]
    
        for chunk in chunks:
            res = pipe(chunk)        
            
            total_score += res[0]['score']
            print(total_score)
            
            label = res[0]['label']
            label_count[label] = label_count.get(label, 0) + 1

    average_score = total_score / len(reader.pages)

    average_label = max(label_count, key=label_count.get)

    
    return average_score, average_label
@app.route("/api/add", methods=['POST'])
def add_numbers():
    try:
        data = request.get_json()
        result1 = data.get('numA')
        result = detect_text(result1)
        print(result)

        return jsonify({'result': result})
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    
@app.route("/api/processPdf", methods=['POST'])
def processPdf():
    try:
        data1 = request.get_json()
        file = data1.get('numA')
        result2,score = pdfprocess(file)
        print(result2)
        print(score)
        #############################################
        # HAVE PROBLEM IN RETURNING THE RESULT 
        #############################################
        #############################################
        # I WILL EAT AND COME BRO
        #############################################
        return jsonify({'result': score})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, port=8080)