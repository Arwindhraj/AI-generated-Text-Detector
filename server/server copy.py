from flask import Flask, jsonify, request
from PyPDF2 import PdfReader
from flask_cors import CORS
from transformers import pipeline
import os
import tempfile

app = Flask(__name__)
CORS(app)

def detect_text(text):
    pipe = pipeline("text-classification", model="nlptown/bert-base-multilingual-uncased-sentiment")
    total_score = 0
    label_count = {}

    # Split text into chunks of maximum sequence length
    max_seq_length = 512
    chunks = [text[j:j + max_seq_length] for j in range(0, len(text), max_seq_length)]

    # Process each chunk separately
    for chunk in chunks:
        res = pipe(chunk)
        
        # Accumulate scores
        total_score += res[0]['score']
        
        # Update label count
        label = res[0]['label']
        label_count[label] = label_count.get(label, 0) + 1

    # Calculate average score
    average_score = total_score / len(text.pages)

    # Calculate average label (assuming label is the most frequent one)
    average_label = max(label_count, key=label_count.get)

    if average_score < 3:
        result = 'The Given text has been generated by Human'
    else:
        result = f'The Given text has been generated by an AI with a score of {average_score:.2f}'
    return result

@app.route("/api/add", methods=['POST'])
def add_numbers():
    try:
        data = request.form
        result1 = data.get('numA')
        pdf_file = request.files['pdfFile']

        # Save the PDF file temporarily
        with tempfile.NamedTemporaryFile(delete=False) as temp_pdf:
            pdf_path = temp_pdf.name
            pdf_file.save(pdf_path)

        with open(pdf_path, 'rb') as file:
            reader = PdfReader(file)
            num_pages = len(reader.pages)
            print(f"Total number of pages: {num_pages}")
            for i in range(num_pages):
                page = reader.pages[i]
                text = page.extract_text()

        result = detect_text(text)

        os.remove(pdf_path)

        return jsonify({'result': result})

    except Exception as e:
        return jsonify({'error': str(e)}), 500  

if __name__ == "__main__":
    app.run(debug=True, port=8080)
